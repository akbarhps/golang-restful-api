package service

import (
	"context"
	"errors"
	"go-api/domain"
	"go-api/model"
	"go-api/repository"
	"testing"
	"time"

	"github.com/go-playground/validator"
	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"golang.org/x/crypto/bcrypt"
)

var userRepository repository.UserRepositoryMock
var userService UserService

func TestMain(m *testing.M) {
	validate := validator.New()
	userRepository = repository.UserRepositoryMock{
		Mock: mock.Mock{},
	}
	userService = NewUserService(validate, &userRepository)
	m.Run()
}

func TestUserServiceImpl_CreateSuccess(t *testing.T) {
	t.Skipf("Skipped because id is generated by service, we can't predict the id and hash password")
}

func TestUserServiceImpl_LoginSuccess(t *testing.T) {
	ctx := context.Background()

	loginRequest := &model.UserLoginRequest{
		Username: "testservice",
		Password: "testservice",
	}

	domainUserRequest := &domain.User{
		Username: loginRequest.Username,
	}

	encrypt, err := bcrypt.GenerateFromPassword([]byte(loginRequest.Password), bcrypt.DefaultCost)
	assert.NoError(t, err)

	domainUserResponse := []domain.User{
		{
			Id:        uuid.UUID{},
			FullName:  "test service",
			Username:  "testservice",
			Email:     "testservice@test.com",
			Password:  string(encrypt),
			CreatedAt: time.Now(),
		},
	}

	userRepository.Mock.On("Find", ctx, domainUserRequest).Return(domainUserResponse, nil)
	user, err := userService.Login(ctx, loginRequest)
	assert.NoError(t, err)
	assert.NotNil(t, user)
}

func TestUserServiceImpl_LoginUsernameNotFound(t *testing.T) {
	ctx := context.Background()

	loginRequest := &model.UserLoginRequest{
		Username: "testother",
		Password: "testservice",
	}

	domainUserRequest := &domain.User{
		Username: loginRequest.Username,
	}

	errNotFound := errors.New("username or email not found")

	userRepository.Mock.On("Find", ctx, domainUserRequest).Return(nil, errNotFound)
	user, err := userService.Login(ctx, loginRequest)
	assert.ErrorIs(t, err, errNotFound)
	assert.Nil(t, user)
}

func TestUserServiceImpl_LoginWrongPassword(t *testing.T) {
	ctx := context.Background()

	loginRequest := &model.UserLoginRequest{
		Username: "testservice",
		Password: "wrongpassword",
	}

	domainUserRequest := &domain.User{
		Username: loginRequest.Username,
		Password: loginRequest.Password,
	}

	encrypt, err := bcrypt.GenerateFromPassword([]byte("testservice"), bcrypt.DefaultCost)
	assert.NoError(t, err)

	domainUserResponse := []domain.User{
		{
			Id:        uuid.UUID{},
			FullName:  "test service",
			Username:  "testservice",
			Email:     "testservice@test.com",
			Password:  string(encrypt),
			CreatedAt: time.Now(),
		},
	}

	userRepository.Mock.On("Find", ctx, domainUserRequest).Return(domainUserResponse, nil)
	user, err := userService.Login(ctx, loginRequest)
	assert.Error(t, err)
	assert.Nil(t, user)
}

func TestUserServiceImpl_Find(t *testing.T) {
	ctx := context.Background()

	modelUserFindRequest := &model.UserFindRequest{
		Username: "testservice",
		Email:    "testservice@test.com",
		FullName: "test service",
	}

	domainUserFindRequest := &domain.User{
		Username: modelUserFindRequest.Username,
		Email:    modelUserFindRequest.Email,
		FullName: modelUserFindRequest.FullName,
	}

	domainUserFindResponses := []domain.User{
		{
			Id:        uuid.New(),
			FullName:  modelUserFindRequest.FullName,
			Username:  modelUserFindRequest.Username,
			Email:     modelUserFindRequest.Email,
			Password:  "testservice",
			CreatedAt: time.Now(),
		},
	}

	userRepository.Mock.On("Find", ctx, domainUserFindRequest).Return(domainUserFindResponses, nil)
	users, err := userService.Find(ctx, modelUserFindRequest)
	assert.NoError(t, err)
	assert.NotNil(t, users)
	assert.Equal(t, modelUserFindRequest.FullName, users[0].FullName)
	assert.Equal(t, modelUserFindRequest.Username, users[0].Username)
	assert.Equal(t, modelUserFindRequest.Email, users[0].Email)
}

func TestUserServiceImpl_UpdateProfile(t *testing.T) {
	ctx := context.Background()
	uid, err := uuid.NewUUID()
	assert.NoError(t, err)

	modelUserUpdateProfileRequest := model.UserUpdateProfileRequest{
		Id:       uid,
		FullName: "test service update",
		Username: "testserviceup",
		Email:    "testserviceupdate@test.com",
	}

	domainUserFindRequest := &domain.User{
		Id:       modelUserUpdateProfileRequest.Id,
		Username: modelUserUpdateProfileRequest.Username,
		Email:    modelUserUpdateProfileRequest.Email,
	}

	domainUserFindResponses := []domain.User{
		{
			Id:        uid,
			FullName:  "test service",
			Username:  "testservice",
			Email:     "testservice@test.com",
			Password:  "testservice",
			CreatedAt: time.Now(),
		},
	}

	userRepository.Mock.On("Find", ctx, domainUserFindRequest).Return(domainUserFindResponses, nil)
	userRepository.Mock.On("Update", ctx, &domainUserFindResponses[0]).Return(nil)
	updatedUser, err := userService.UpdateProfile(ctx, &modelUserUpdateProfileRequest)
	assert.NoError(t, err)
	assert.NotNil(t, updatedUser)
}

func TestUserServiceImpl_Delete(t *testing.T) {
	ctx := context.Background()

	uid, err := uuid.NewUUID()
	assert.NoError(t, err)

	modelUserDeleteRequest := &model.UserDeleteRequest{
		Id:       uid,
		Username: "test service",
		Email:    "testservice@test.com",
		Password: "testservice",
	}

	domainUserFindRequest := &domain.User{
		Id:       modelUserDeleteRequest.Id,
		Username: modelUserDeleteRequest.Username,
		Email:    modelUserDeleteRequest.Email,
	}

	encrypt, err := bcrypt.GenerateFromPassword([]byte(modelUserDeleteRequest.Password), bcrypt.DefaultCost)
	assert.NoError(t, err)

	domainUserFindResponse := []domain.User{
		{
			Id:        domainUserFindRequest.Id,
			FullName:  domainUserFindRequest.FullName,
			Username:  domainUserFindRequest.Username,
			Email:     domainUserFindRequest.Email,
			Password:  string(encrypt),
			CreatedAt: time.Now(),
		},
	}

	userRepository.Mock.On("Find", ctx, domainUserFindRequest).Return(domainUserFindResponse, nil)
	userRepository.Mock.On("Delete", ctx, &domainUserFindResponse[0]).Return(nil)
	err = userService.Delete(ctx, modelUserDeleteRequest)
	assert.NoError(t, err)
}
